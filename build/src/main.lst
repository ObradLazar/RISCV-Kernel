GAS LISTING /tmp/ccGOUQ9r.s 			page 1


   1              		.file	"main.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_Z15userMainWrapperPv
   9              	_Z15userMainWrapperPv:
  10              	.LFB49:
  11              		.file 1 "src/main.cpp"
   1:src/main.cpp  **** #include "../h/kernelThread.hpp"
   2:src/main.cpp  **** #include "../h/syscall_c.hpp"
   3:src/main.cpp  **** #include "../h/riscv.hpp"
   4:src/main.cpp  **** //#include "../javniTestovi/userMain.cpp"
   5:src/main.cpp  **** 
   6:src/main.cpp  **** extern void userMain();
   7:src/main.cpp  **** 
   8:src/main.cpp  **** void userMainWrapper(void *arg){
  12              		.loc 1 8 32
  13              		.cfi_startproc
  14              	.LVL0:
  15 0000 130101FF 		addi	sp,sp,-16
  16              		.cfi_def_cfa_offset 16
  17 0004 23341100 		sd	ra,8(sp)
  18 0008 23308100 		sd	s0,0(sp)
  19              		.cfi_offset 1, -8
  20              		.cfi_offset 8, -16
  21 000c 13040101 		addi	s0,sp,16
  22              		.cfi_def_cfa 8, 0
   9:src/main.cpp  ****     userMain();
  23              		.loc 1 9 5
  24              		.loc 1 9 13 is_stmt 0
  25 0010 97000000 		call	_Z8userMainv@plt
  25      E7800000 
  26              	.LVL1:
  10:src/main.cpp  **** }
  27              		.loc 1 10 1
  28 0018 83308100 		ld	ra,8(sp)
  29              		.cfi_restore 1
  30 001c 03340100 		ld	s0,0(sp)
  31              		.cfi_restore 8
  32              		.cfi_def_cfa 2, 16
  33 0020 13010101 		addi	sp,sp,16
  34              		.cfi_def_cfa_offset 0
  35 0024 67800000 		jr	ra
  36              		.cfi_endproc
  37              	.LFE49:
  39              		.section	.rodata.str1.8,"aMS",@progbits,1
  40              		.align	3
  41              	.LC0:
  42 0000 446F7361 		.string	"Dosao do kraja!\n"
  42      6F20646F 
  42      206B7261 
  42      6A61210A 
  42      00
  43              		.text
  44              		.align	2
GAS LISTING /tmp/ccGOUQ9r.s 			page 2


  45              		.globl	main
  47              	main:
  48              	.LFB50:
  11:src/main.cpp  **** 
  12:src/main.cpp  **** int main () {
  49              		.loc 1 12 13 is_stmt 1
  50              		.cfi_startproc
  51 0028 130101FE 		addi	sp,sp,-32
  52              		.cfi_def_cfa_offset 32
  53 002c 233C1100 		sd	ra,24(sp)
  54 0030 23388100 		sd	s0,16(sp)
  55              		.cfi_offset 1, -8
  56              		.cfi_offset 8, -16
  57 0034 13040102 		addi	s0,sp,32
  58              		.cfi_def_cfa 8, 0
  13:src/main.cpp  **** 
  14:src/main.cpp  ****     Riscv::w_stvec((uint64) &Riscv::supervisorTrap);
  59              		.loc 1 14 5
  60              		.loc 1 14 19 is_stmt 0
  61 0038 97070000 		la	a5,_ZN5Riscv14supervisorTrapEv
  61      83B70700 
  62              	.LVL2:
  63              	.LBB8:
  64              	.LBB9:
  65              		.file 2 "src/../h/../h/riscv.hpp"
   1:src/../h/../h/riscv.hpp **** #ifndef RISCV_HPP
   2:src/../h/../h/riscv.hpp **** #define RISCV_HPP
   3:src/../h/../h/riscv.hpp **** 
   4:src/../h/../h/riscv.hpp **** #include "../lib/hw.h"
   5:src/../h/../h/riscv.hpp **** #include "kernelThread.hpp"
   6:src/../h/../h/riscv.hpp **** #include "kernelSemaphore.hpp"
   7:src/../h/../h/riscv.hpp **** #include "printMethods.hpp"
   8:src/../h/../h/riscv.hpp **** #include "../lib/console.h"
   9:src/../h/../h/riscv.hpp **** #include "memoryAllocator.hpp"
  10:src/../h/../h/riscv.hpp **** 
  11:src/../h/../h/riscv.hpp **** class Riscv{
  12:src/../h/../h/riscv.hpp **** 
  13:src/../h/../h/riscv.hpp **** public:
  14:src/../h/../h/riscv.hpp **** 
  15:src/../h/../h/riscv.hpp ****     static void popAllRegisters();
  16:src/../h/../h/riscv.hpp ****     static void pushAllRegisters();
  17:src/../h/../h/riscv.hpp **** 
  18:src/../h/../h/riscv.hpp ****     //cant be inline / must jump!!!
  19:src/../h/../h/riscv.hpp ****     static void popSppSpie();
  20:src/../h/../h/riscv.hpp **** 
  21:src/../h/../h/riscv.hpp **** 
  22:src/../h/../h/riscv.hpp ****     //method for ecall and passing the arguments
  23:src/../h/../h/riscv.hpp ****     static void ecallWithFourArguments(uint64 a0,
  24:src/../h/../h/riscv.hpp ****                                    uint64 a1,
  25:src/../h/../h/riscv.hpp ****                                    uint64 a2,
  26:src/../h/../h/riscv.hpp ****                                    uint64 a3,
  27:src/../h/../h/riscv.hpp ****                                    uint64 a4);
  28:src/../h/../h/riscv.hpp **** 
  29:src/../h/../h/riscv.hpp ****     static void ecallWithThreeArguments(uint64 a0,
  30:src/../h/../h/riscv.hpp ****                                         uint64 a1,
  31:src/../h/../h/riscv.hpp ****                                         uint64 a2,
  32:src/../h/../h/riscv.hpp ****                                         uint64 a3);
GAS LISTING /tmp/ccGOUQ9r.s 			page 3


  33:src/../h/../h/riscv.hpp **** 
  34:src/../h/../h/riscv.hpp ****     static void ecallWithTwoArguments(uint64 a0,
  35:src/../h/../h/riscv.hpp ****                                       uint64 a1,
  36:src/../h/../h/riscv.hpp ****                                       uint64 a2);
  37:src/../h/../h/riscv.hpp **** 
  38:src/../h/../h/riscv.hpp ****     static void ecallWithOneArgument(uint64 a0,
  39:src/../h/../h/riscv.hpp ****                                      uint64 a1);
  40:src/../h/../h/riscv.hpp **** 
  41:src/../h/../h/riscv.hpp ****     static void ecallWithoutArguments(uint64 a0);
  42:src/../h/../h/riscv.hpp **** 
  43:src/../h/../h/riscv.hpp ****     //pushing reg a0 to context
  44:src/../h/../h/riscv.hpp ****     static void pushReturnValueToStack(uint64 retVal);
  45:src/../h/../h/riscv.hpp **** 
  46:src/../h/../h/riscv.hpp ****     //reading and writing registers for arguments, code and return values
  47:src/../h/../h/riscv.hpp ****     static uint64 r_a0();
  48:src/../h/../h/riscv.hpp ****     static void w_a0(uint64 value);
  49:src/../h/../h/riscv.hpp ****     static uint64 r_a1();
  50:src/../h/../h/riscv.hpp ****     static void w_a1(uint64 value);
  51:src/../h/../h/riscv.hpp ****     static uint64 r_a2();
  52:src/../h/../h/riscv.hpp ****     static void w_a2(uint64 value);
  53:src/../h/../h/riscv.hpp ****     static uint64 r_a3();
  54:src/../h/../h/riscv.hpp ****     static void w_a3(uint64 value);
  55:src/../h/../h/riscv.hpp ****     static uint64 r_a4();
  56:src/../h/../h/riscv.hpp ****     static void w_a4(uint64 value);
  57:src/../h/../h/riscv.hpp **** 
  58:src/../h/../h/riscv.hpp ****     //getting return value from method
  59:src/../h/../h/riscv.hpp ****     static uint64 getReturnValue();
  60:src/../h/../h/riscv.hpp **** 
  61:src/../h/../h/riscv.hpp ****     //sepc register / previous PC value
  62:src/../h/../h/riscv.hpp ****     static uint64 r_sepc();
  63:src/../h/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  64:src/../h/../h/riscv.hpp **** 
  65:src/../h/../h/riscv.hpp ****     //sstatus register
  66:src/../h/../h/riscv.hpp ****     static uint64 r_sstatus();
  67:src/../h/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  68:src/../h/../h/riscv.hpp **** 
  69:src/../h/../h/riscv.hpp ****     //stvec / adress of interrupt
  70:src/../h/../h/riscv.hpp ****     static uint64 r_stvec();
  71:src/../h/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  72:src/../h/../h/riscv.hpp **** 
  73:src/../h/../h/riscv.hpp ****     //read cause reg
  74:src/../h/../h/riscv.hpp ****     static uint64 r_scause();
  75:src/../h/../h/riscv.hpp **** 
  76:src/../h/../h/riscv.hpp ****     //mask for sip register
  77:src/../h/../h/riscv.hpp ****     enum BitMaskSIP{
  78:src/../h/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),        //software interrupt
  79:src/../h/../h/riscv.hpp ****         SIP_STIP = (1 << 5),        //timer interrupt
  80:src/../h/../h/riscv.hpp ****         SIP_SEIP = (1 << 9)         //external interrupt
  81:src/../h/../h/riscv.hpp ****     };
  82:src/../h/../h/riscv.hpp **** 
  83:src/../h/../h/riscv.hpp ****     //mask for sstatus register
  84:src/../h/../h/riscv.hpp ****     enum BitMaskSSTATUS{
  85:src/../h/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),     //disable external interrupt (0)
  86:src/../h/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),    //previous value of SPP
  87:src/../h/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8)      //privilige in which interrupt happend
  88:src/../h/../h/riscv.hpp ****     };
  89:src/../h/../h/riscv.hpp **** 
GAS LISTING /tmp/ccGOUQ9r.s 			page 4


  90:src/../h/../h/riscv.hpp ****     //sip - interrupt register
  91:src/../h/../h/riscv.hpp ****     static uint64 r_sip();
  92:src/../h/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  93:src/../h/../h/riscv.hpp **** 
  94:src/../h/../h/riscv.hpp ****     //masking bits in sip and sstatus register - S - set / C - clear
  95:src/../h/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  96:src/../h/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  97:src/../h/../h/riscv.hpp **** 
  98:src/../h/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  99:src/../h/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
 100:src/../h/../h/riscv.hpp **** 
 101:src/../h/../h/riscv.hpp ****     //supervisorTrap
 102:src/../h/../h/riscv.hpp ****     static void supervisorTrap();
 103:src/../h/../h/riscv.hpp **** 
 104:src/../h/../h/riscv.hpp **** private:
 105:src/../h/../h/riscv.hpp **** 
 106:src/../h/../h/riscv.hpp ****     static void supervisorTrapHandler();
 107:src/../h/../h/riscv.hpp **** 
 108:src/../h/../h/riscv.hpp **** };
 109:src/../h/../h/riscv.hpp **** 
 110:src/../h/../h/riscv.hpp **** //inline definitions of methods above
 111:src/../h/../h/riscv.hpp **** 
 112:src/../h/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask){
 113:src/../h/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" :: [mask] "r" (mask));
 114:src/../h/../h/riscv.hpp **** };
 115:src/../h/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask){
 116:src/../h/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" :: [mask] "r" (mask));
 117:src/../h/../h/riscv.hpp **** };
 118:src/../h/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask){
 119:src/../h/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" :: [mask] "r" (mask));
 120:src/../h/../h/riscv.hpp **** };
 121:src/../h/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask){
 122:src/../h/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" :: [mask] "r" (mask));
 123:src/../h/../h/riscv.hpp **** };
 124:src/../h/../h/riscv.hpp **** 
 125:src/../h/../h/riscv.hpp **** 
 126:src/../h/../h/riscv.hpp **** 
 127:src/../h/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip){
 128:src/../h/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" :: [sip] "r" (sip));
 129:src/../h/../h/riscv.hpp **** };
 130:src/../h/../h/riscv.hpp **** inline uint64 Riscv::r_sip(){
 131:src/../h/../h/riscv.hpp ****     uint64 sip;
 132:src/../h/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r" (sip));
 133:src/../h/../h/riscv.hpp ****     return sip;
 134:src/../h/../h/riscv.hpp **** };
 135:src/../h/../h/riscv.hpp **** 
 136:src/../h/../h/riscv.hpp **** inline void Riscv::pushReturnValueToStack(uint64 retVal) {
 137:src/../h/../h/riscv.hpp ****     __asm__ volatile("sd %[retVal], 10 * 8(fp)" ::[retVal] "r" (retVal));
 138:src/../h/../h/riscv.hpp **** };
 139:src/../h/../h/riscv.hpp **** 
 140:src/../h/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec){
 141:src/../h/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" :: [stvec] "r" (stvec));
  66              		.loc 2 141 5 is_stmt 1
  67              		.loc 2 141 69 is_stmt 0
  68              	#APP
  69              	# 141 "src/../h/../h/riscv.hpp" 1
 142              	};
GAS LISTING /tmp/ccGOUQ9r.s 			page 5


  70              		csrw stvec, a5
  71              	# 0 "" 2
  72              	.LVL3:
  73              	#NO_APP
  74              	.LBE9:
  75              	.LBE8:
  15:src/main.cpp  ****     Riscv::ms_sstatus(Riscv::SSTATUS_SIE);
  76              		.loc 1 15 5 is_stmt 1
  77              	.LBB10:
  78              	.LBB11:
 116:src/../h/../h/riscv.hpp **** };
  79              		.loc 2 116 5
 116:src/../h/../h/riscv.hpp **** };
  80              		.loc 2 116 68 is_stmt 0
  81 0044 93072000 		li	a5,2
  82              	#APP
  83              	# 116 "src/../h/../h/riscv.hpp" 1
  84              		csrs sstatus, a5
  85              	# 0 "" 2
  86              	.LVL4:
  87              	#NO_APP
  88              	.LBE11:
  89              	.LBE10:
  16:src/main.cpp  **** 
  17:src/main.cpp  ****     //MAIN nit
  18:src/main.cpp  ****     kernelThread* mainThread;
  90              		.loc 1 18 5 is_stmt 1
  19:src/main.cpp  ****     kernelThread::createThread(
  91              		.loc 1 19 5
  92              		.loc 1 19 31 is_stmt 0
  93 004c 93060000 		li	a3,0
  94 0050 13060000 		li	a2,0
  95 0054 93050000 		li	a1,0
  96 0058 130584FE 		addi	a0,s0,-24
  97 005c 97000000 		call	_ZN12kernelThread12createThreadEPPS_PFvPvES2_Pm@plt
  97      E7800000 
  98              	.LVL5:
  20:src/main.cpp  ****             &mainThread,
  21:src/main.cpp  ****             nullptr,
  22:src/main.cpp  ****             nullptr,
  23:src/main.cpp  ****             nullptr);
  24:src/main.cpp  ****     kernelThread::running = mainThread;
  99              		.loc 1 24 5 is_stmt 1
 100              		.loc 1 24 27 is_stmt 0
 101 0064 97070000 		la	a5,_ZN12kernelThread7runningE
 101      83B70700 
 102 006c 033784FE 		ld	a4,-24(s0)
 103 0070 23B0E700 		sd	a4,0(a5)
  25:src/main.cpp  **** 
  26:src/main.cpp  ****     /*uint64* stack_ptr = (uint64*) MemoryAllocator::getInstance().mem_alloc(DEFAULT_STACK_SIZE * s
  27:src/main.cpp  ****     //USERMAIN nit
  28:src/main.cpp  ****     kernelThread* userMainThread;
  29:src/main.cpp  ****     kernelThread::createThread(
  30:src/main.cpp  ****             &userMainThread,
  31:src/main.cpp  ****             userMainWrapper,
  32:src/main.cpp  ****             nullptr,
  33:src/main.cpp  ****             stack_ptr);
GAS LISTING /tmp/ccGOUQ9r.s 			page 6


  34:src/main.cpp  **** */
  35:src/main.cpp  ****     Riscv::ecallWithoutArguments(0x50);
 104              		.loc 1 35 5 is_stmt 1
 105              		.loc 1 35 33 is_stmt 0
 106 0074 13050005 		li	a0,80
 107 0078 97000000 		call	_ZN5Riscv21ecallWithoutArgumentsEm@plt
 107      E7800000 
 108              	.LVL6:
  36:src/main.cpp  **** 
  37:src/main.cpp  ****     kernelThread* userMainThread;
 109              		.loc 1 37 5 is_stmt 1
  38:src/main.cpp  ****     thread_create(&userMainThread,userMainWrapper,nullptr);
 110              		.loc 1 38 5
 111              		.loc 1 38 18 is_stmt 0
 112 0080 13060000 		li	a2,0
 113 0084 97050000 		lla	a1,_Z15userMainWrapperPv
 113      93850500 
 114 008c 130504FE 		addi	a0,s0,-32
 115 0090 97000000 		call	_Z13thread_createPP12kernelThreadPFvPvES2_@plt
 115      E7800000 
 116              	.LVL7:
 117              	.L5:
  39:src/main.cpp  **** 
  40:src/main.cpp  **** 
  41:src/main.cpp  ****     while(!userMainThread->isFinished()){
 118              		.loc 1 41 5 is_stmt 1
 119              		.loc 1 41 11
 120              		.loc 1 41 38 is_stmt 0
 121 0098 833704FE 		ld	a5,-32(s0)
 122              	.LVL8:
 123              	.LBB12:
 124              	.LBB13:
 125              		.file 3 "src/../h/kernelThread.hpp"
   1:src/../h/kernelThread.hpp **** #ifndef KERNEL_THREAD_HPP
   2:src/../h/kernelThread.hpp **** #define KERNEL_THREAD_HPP
   3:src/../h/kernelThread.hpp **** 
   4:src/../h/kernelThread.hpp **** #include "../lib/mem.h"
   5:src/../h/kernelThread.hpp **** //#include "riscv.hpp"
   6:src/../h/kernelThread.hpp **** #include "scheduler.hpp"
   7:src/../h/kernelThread.hpp **** #include "syscall_c.hpp"
   8:src/../h/kernelThread.hpp **** 
   9:src/../h/kernelThread.hpp **** class kernelThread{
  10:src/../h/kernelThread.hpp **** 
  11:src/../h/kernelThread.hpp **** public:
  12:src/../h/kernelThread.hpp ****     static kernelThread *running;   //current running
  13:src/../h/kernelThread.hpp **** 
  14:src/../h/kernelThread.hpp ****     using Body = void(*)(void *);     //possible void(*)(void *)
  15:src/../h/kernelThread.hpp **** 
  16:src/../h/kernelThread.hpp ****     static int createThread(
  17:src/../h/kernelThread.hpp ****                 kernelThread **handle,
  18:src/../h/kernelThread.hpp ****                 Body body,
  19:src/../h/kernelThread.hpp ****                 void *args,
  20:src/../h/kernelThread.hpp ****                 uint64 *stack);
  21:src/../h/kernelThread.hpp ****     static int threadExit();
  22:src/../h/kernelThread.hpp ****     static void dispatchThread();
  23:src/../h/kernelThread.hpp ****     static int startThread(kernelThread *handle);
  24:src/../h/kernelThread.hpp ****     static void yield();
GAS LISTING /tmp/ccGOUQ9r.s 			page 7


  25:src/../h/kernelThread.hpp ****     static int deleteThread(kernelThread *handle);
  26:src/../h/kernelThread.hpp **** 
  27:src/../h/kernelThread.hpp ****     ~kernelThread(){
  28:src/../h/kernelThread.hpp ****         //MemoryAllocator::getInstance().mem_free(stack);
  29:src/../h/kernelThread.hpp ****         //mem_free(stack);
  30:src/../h/kernelThread.hpp ****         delete stack;
  31:src/../h/kernelThread.hpp ****     };
  32:src/../h/kernelThread.hpp **** 
  33:src/../h/kernelThread.hpp ****     struct Context{
  34:src/../h/kernelThread.hpp ****         uint64 ra;
  35:src/../h/kernelThread.hpp ****         uint64 sp;
  36:src/../h/kernelThread.hpp ****     };
  37:src/../h/kernelThread.hpp **** 
  38:src/../h/kernelThread.hpp ****     static void contextSwitch(Context *oldContext, Context *runningContext);
  39:src/../h/kernelThread.hpp ****     static void threadWrapper();
  40:src/../h/kernelThread.hpp **** 
  41:src/../h/kernelThread.hpp ****     //  GETTERS & SETTERS  //
  42:src/../h/kernelThread.hpp **** 
  43:src/../h/kernelThread.hpp ****     bool isReady() const {
  44:src/../h/kernelThread.hpp ****         return ready;
  45:src/../h/kernelThread.hpp ****     }
  46:src/../h/kernelThread.hpp **** 
  47:src/../h/kernelThread.hpp ****     void setReady(bool ready) {
  48:src/../h/kernelThread.hpp ****         kernelThread::ready = ready;
  49:src/../h/kernelThread.hpp ****     }
  50:src/../h/kernelThread.hpp **** 
  51:src/../h/kernelThread.hpp ****     bool isBlocked() const {
  52:src/../h/kernelThread.hpp ****         return blocked;
  53:src/../h/kernelThread.hpp ****     }
  54:src/../h/kernelThread.hpp **** 
  55:src/../h/kernelThread.hpp ****     void setBlocked(bool blocked) {
  56:src/../h/kernelThread.hpp ****         kernelThread::blocked = blocked;
  57:src/../h/kernelThread.hpp ****     }
  58:src/../h/kernelThread.hpp **** 
  59:src/../h/kernelThread.hpp ****     bool isFinished() const {
  60:src/../h/kernelThread.hpp ****         return finished;
 126              		.loc 3 60 9 is_stmt 1
 127              		.loc 3 60 16 is_stmt 0
 128 009c 83C7A702 		lbu	a5,42(a5)
 129              	.LVL9:
 130              	.LBE13:
 131              	.LBE12:
 132              		.loc 1 41 11
 133 00a0 63980700 		bnez	a5,.L4
  42:src/main.cpp  ****         //printStr("\nPonovo u main-u\n\n");
  43:src/main.cpp  ****         thread_dispatch();
 134              		.loc 1 43 9 is_stmt 1
 135              		.loc 1 43 24 is_stmt 0
 136 00a4 97000000 		call	_Z15thread_dispatchv@plt
 136      E7800000 
 137              	.LVL10:
 138 00ac 6FF0DFFE 		j	.L5
 139              	.L4:
  44:src/main.cpp  ****     }
  45:src/main.cpp  ****     
  46:src/main.cpp  ****     printStr("Dosao do kraja!\n");
 140              		.loc 1 46 5 is_stmt 1
GAS LISTING /tmp/ccGOUQ9r.s 			page 8


 141              		.loc 1 46 13 is_stmt 0
 142 00b0 17050000 		lla	a0,.LC0
 142      13050500 
 143 00b8 97000000 		call	_Z8printStrPKc@plt
 143      E7800000 
 144              	.LVL11:
  47:src/main.cpp  **** 
  48:src/main.cpp  ****     return 0;
 145              		.loc 1 48 5 is_stmt 1
  49:src/main.cpp  **** 
  50:src/main.cpp  **** };
 146              		.loc 1 50 1 is_stmt 0
 147 00c0 13050000 		li	a0,0
 148 00c4 83308101 		ld	ra,24(sp)
 149              		.cfi_restore 1
 150 00c8 03340101 		ld	s0,16(sp)
 151              		.cfi_restore 8
 152              		.cfi_def_cfa 2, 32
 153 00cc 13010102 		addi	sp,sp,32
 154              		.cfi_def_cfa_offset 0
 155 00d0 67800000 		jr	ra
 156              		.cfi_endproc
 157              	.LFE50:
 159              	.Letext0:
 160              		.file 4 "src/../h/../lib/hw.h"
 161              		.file 5 "src/../h/syscall_c.hpp"
 162              		.file 6 "src/../h/../h/printMethods.hpp"
GAS LISTING /tmp/ccGOUQ9r.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/ccGOUQ9r.s:9      .text:0000000000000000 _Z15userMainWrapperPv
     /tmp/ccGOUQ9r.s:13     .text:0000000000000000 .L0 
     /tmp/ccGOUQ9r.s:15     .text:0000000000000000 .L0 
     /tmp/ccGOUQ9r.s:16     .text:0000000000000004 .L0 
     /tmp/ccGOUQ9r.s:19     .text:000000000000000c .L0 
     /tmp/ccGOUQ9r.s:20     .text:000000000000000c .L0 
     /tmp/ccGOUQ9r.s:22     .text:0000000000000010 .L0 
     /tmp/ccGOUQ9r.s:24     .text:0000000000000010 .L0 
     /tmp/ccGOUQ9r.s:25     .text:0000000000000010 .L0 
     /tmp/ccGOUQ9r.s:28     .text:0000000000000018 .L0 
     /tmp/ccGOUQ9r.s:29     .text:000000000000001c .L0 
     /tmp/ccGOUQ9r.s:31     .text:0000000000000020 .L0 
     /tmp/ccGOUQ9r.s:32     .text:0000000000000020 .L0 
     /tmp/ccGOUQ9r.s:34     .text:0000000000000024 .L0 
     /tmp/ccGOUQ9r.s:36     .text:0000000000000028 .L0 
     /tmp/ccGOUQ9r.s:47     .text:0000000000000028 main
     /tmp/ccGOUQ9r.s:50     .text:0000000000000028 .L0 
     /tmp/ccGOUQ9r.s:51     .text:0000000000000028 .L0 
     /tmp/ccGOUQ9r.s:52     .text:000000000000002c .L0 
     /tmp/ccGOUQ9r.s:55     .text:0000000000000034 .L0 
     /tmp/ccGOUQ9r.s:56     .text:0000000000000034 .L0 
     /tmp/ccGOUQ9r.s:58     .text:0000000000000038 .L0 
     /tmp/ccGOUQ9r.s:60     .text:0000000000000038 .L0 
     /tmp/ccGOUQ9r.s:61     .text:0000000000000038 .L0 
     /tmp/ccGOUQ9r.s:67     .text:0000000000000040 .L0 
src/../h/../h/riscv.hpp:141    .text:0000000000000040 .L0 
     /tmp/ccGOUQ9r.s:79     .text:0000000000000044 .L0 
     /tmp/ccGOUQ9r.s:80     .text:0000000000000044 .L0 
     /tmp/ccGOUQ9r.s:81     .text:0000000000000044 .L0 
     /tmp/ccGOUQ9r.s:91     .text:000000000000004c .L0 
     /tmp/ccGOUQ9r.s:92     .text:000000000000004c .L0 
     /tmp/ccGOUQ9r.s:93     .text:000000000000004c .L0 
     /tmp/ccGOUQ9r.s:100    .text:0000000000000064 .L0 
     /tmp/ccGOUQ9r.s:101    .text:0000000000000064 .L0 
     /tmp/ccGOUQ9r.s:105    .text:0000000000000074 .L0 
     /tmp/ccGOUQ9r.s:106    .text:0000000000000074 .L0 
     /tmp/ccGOUQ9r.s:110    .text:0000000000000080 .L0 
     /tmp/ccGOUQ9r.s:111    .text:0000000000000080 .L0 
     /tmp/ccGOUQ9r.s:112    .text:0000000000000080 .L0 
     /tmp/ccGOUQ9r.s:119    .text:0000000000000098 .L0 
     /tmp/ccGOUQ9r.s:120    .text:0000000000000098 .L0 
     /tmp/ccGOUQ9r.s:121    .text:0000000000000098 .L0 
     /tmp/ccGOUQ9r.s:127    .text:000000000000009c .L0 
     /tmp/ccGOUQ9r.s:128    .text:000000000000009c .L0 
     /tmp/ccGOUQ9r.s:133    .text:00000000000000a0 .L0 
     /tmp/ccGOUQ9r.s:135    .text:00000000000000a4 .L0 
     /tmp/ccGOUQ9r.s:136    .text:00000000000000a4 .L0 
     /tmp/ccGOUQ9r.s:141    .text:00000000000000b0 .L0 
     /tmp/ccGOUQ9r.s:142    .text:00000000000000b0 .L0 
     /tmp/ccGOUQ9r.s:146    .text:00000000000000c0 .L0 
     /tmp/ccGOUQ9r.s:147    .text:00000000000000c0 .L0 
     /tmp/ccGOUQ9r.s:149    .text:00000000000000c8 .L0 
     /tmp/ccGOUQ9r.s:151    .text:00000000000000cc .L0 
     /tmp/ccGOUQ9r.s:152    .text:00000000000000cc .L0 
     /tmp/ccGOUQ9r.s:154    .text:00000000000000d0 .L0 
GAS LISTING /tmp/ccGOUQ9r.s 			page 10


     /tmp/ccGOUQ9r.s:156    .text:00000000000000d4 .L0 
     /tmp/ccGOUQ9r.s:163    .text:00000000000000d4 .L0 
     /tmp/ccGOUQ9r.s:61     .text:0000000000000038 .L0 
     /tmp/ccGOUQ9r.s:101    .text:0000000000000064 .L0 
     /tmp/ccGOUQ9r.s:113    .text:0000000000000084 .L0 
     /tmp/ccGOUQ9r.s:41     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccGOUQ9r.s:142    .text:00000000000000b0 .L0 
     /tmp/ccGOUQ9r.s:139    .text:00000000000000b0 .L4
     /tmp/ccGOUQ9r.s:117    .text:0000000000000098 .L5
     /tmp/ccGOUQ9r.s:1220   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccGOUQ9r.s:2279   .debug_str:00000000000008bf .LASF143
     /tmp/ccGOUQ9r.s:2097   .debug_str:00000000000002b0 .LASF144
     /tmp/ccGOUQ9r.s:2049   .debug_str:00000000000000a0 .LASF145
     /tmp/ccGOUQ9r.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccGOUQ9r.s:159    .text:00000000000000d4 .Letext0
     /tmp/ccGOUQ9r.s:2031   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccGOUQ9r.s:2129   .debug_str:00000000000003ca .LASF0
     /tmp/ccGOUQ9r.s:2157   .debug_str:000000000000047b .LASF1
     /tmp/ccGOUQ9r.s:2229   .debug_str:0000000000000726 .LASF2
     /tmp/ccGOUQ9r.s:2235   .debug_str:0000000000000756 .LASF4
     /tmp/ccGOUQ9r.s:2133   .debug_str:00000000000003dd .LASF3
     /tmp/ccGOUQ9r.s:2037   .debug_str:0000000000000016 .LASF5
     /tmp/ccGOUQ9r.s:2207   .debug_str:0000000000000643 .LASF6
     /tmp/ccGOUQ9r.s:2149   .debug_str:000000000000042a .LASF7
     /tmp/ccGOUQ9r.s:2107   .debug_str:00000000000002e1 .LASF8
     /tmp/ccGOUQ9r.s:2115   .debug_str:000000000000033f .LASF9
     /tmp/ccGOUQ9r.s:2063   .debug_str:0000000000000192 .LASF10
     /tmp/ccGOUQ9r.s:2095   .debug_str:00000000000002a1 .LASF11
     /tmp/ccGOUQ9r.s:2071   .debug_str:00000000000001c4 .LASF12
     /tmp/ccGOUQ9r.s:2061   .debug_str:0000000000000182 .LASF13
     /tmp/ccGOUQ9r.s:2261   .debug_str:000000000000083d .LASF14
     /tmp/ccGOUQ9r.s:2089   .debug_str:0000000000000254 .LASF15
     /tmp/ccGOUQ9r.s:2255   .debug_str:0000000000000813 .LASF16
     /tmp/ccGOUQ9r.s:2169   .debug_str:00000000000004fb .LASF17
     /tmp/ccGOUQ9r.s:2201   .debug_str:0000000000000616 .LASF51
     /tmp/ccGOUQ9r.s:2265   .debug_str:0000000000000860 .LASF146
     /tmp/ccGOUQ9r.s:2275   .debug_str:00000000000008aa .LASF147
     /tmp/ccGOUQ9r.s:2259   .debug_str:0000000000000830 .LASF18
     /tmp/ccGOUQ9r.s:2185   .debug_str:000000000000057f .LASF20
     /tmp/ccGOUQ9r.s:2193   .debug_str:00000000000005e0 .LASF148
     /tmp/ccGOUQ9r.s:2251   .debug_str:00000000000007ff .LASF76
     /tmp/ccGOUQ9r.s:2119   .debug_str:000000000000035f .LASF78
     /tmp/ccGOUQ9r.s:2249   .debug_str:00000000000007f0 .LASF22
     /tmp/ccGOUQ9r.s:2041   .debug_str:0000000000000028 .LASF24
     /tmp/ccGOUQ9r.s:2273   .debug_str:000000000000089e .LASF19
     /tmp/ccGOUQ9r.s:2331   .debug_str:0000000000000ad7 .LASF21
     /tmp/ccGOUQ9r.s:2161   .debug_str:00000000000004ad .LASF23
     /tmp/ccGOUQ9r.s:2191   .debug_str:00000000000005c6 .LASF25
     /tmp/ccGOUQ9r.s:2155   .debug_str:000000000000046e .LASF26
     /tmp/ccGOUQ9r.s:2075   .debug_str:00000000000001e2 .LASF27
     /tmp/ccGOUQ9r.s:2111   .debug_str:000000000000030e .LASF28
     /tmp/ccGOUQ9r.s:2127   .debug_str:00000000000003b4 .LASF29
     /tmp/ccGOUQ9r.s:2073   .debug_str:00000000000001d4 .LASF50
     /tmp/ccGOUQ9r.s:2055   .debug_str:0000000000000131 .LASF52
     /tmp/ccGOUQ9r.s:2059   .debug_str:0000000000000174 .LASF30
     /tmp/ccGOUQ9r.s:2113   .debug_str:000000000000031c .LASF31
     /tmp/ccGOUQ9r.s:2299   .debug_str:0000000000000a26 .LASF34
GAS LISTING /tmp/ccGOUQ9r.s 			page 11


     /tmp/ccGOUQ9r.s:2179   .debug_str:0000000000000553 .LASF36
     /tmp/ccGOUQ9r.s:2221   .debug_str:00000000000006d2 .LASF32
     /tmp/ccGOUQ9r.s:2307   .debug_str:0000000000000a50 .LASF33
     /tmp/ccGOUQ9r.s:2231   .debug_str:0000000000000734 .LASF35
     /tmp/ccGOUQ9r.s:2159   .debug_str:000000000000048e .LASF37
     /tmp/ccGOUQ9r.s:2271   .debug_str:0000000000000893 .LASF38
     /tmp/ccGOUQ9r.s:2269   .debug_str:0000000000000873 .LASF39
     /tmp/ccGOUQ9r.s:2267   .debug_str:0000000000000868 .LASF40
     /tmp/ccGOUQ9r.s:2241   .debug_str:0000000000000780 .LASF41
     /tmp/ccGOUQ9r.s:2053   .debug_str:0000000000000125 .LASF42
     /tmp/ccGOUQ9r.s:2167   .debug_str:00000000000004da .LASF43
     /tmp/ccGOUQ9r.s:2289   .debug_str:00000000000009e6 .LASF149
     /tmp/ccGOUQ9r.s:2333   .debug_str:0000000000000afa .LASF44
     /tmp/ccGOUQ9r.s:2035   .debug_str:0000000000000011 .LASF45
     /tmp/ccGOUQ9r.s:2203   .debug_str:0000000000000623 .LASF46
     /tmp/ccGOUQ9r.s:2069   .debug_str:00000000000001be .LASF47
     /tmp/ccGOUQ9r.s:2189   .debug_str:00000000000005be .LASF48
     /tmp/ccGOUQ9r.s:2253   .debug_str:000000000000080a .LASF49
     /tmp/ccGOUQ9r.s:2177   .debug_str:0000000000000533 .LASF53
     /tmp/ccGOUQ9r.s:2309   .debug_str:0000000000000a6d .LASF54
     /tmp/ccGOUQ9r.s:2301   .debug_str:0000000000000a2e .LASF150
     /tmp/ccGOUQ9r.s:2093   .debug_str:0000000000000295 .LASF55
     /tmp/ccGOUQ9r.s:2277   .debug_str:00000000000008b2 .LASF56
     /tmp/ccGOUQ9r.s:2077   .debug_str:0000000000000206 .LASF57
     /tmp/ccGOUQ9r.s:2237   .debug_str:000000000000075d .LASF58
     /tmp/ccGOUQ9r.s:2109   .debug_str:00000000000002f1 .LASF59
     /tmp/ccGOUQ9r.s:2215   .debug_str:0000000000000689 .LASF60
     /tmp/ccGOUQ9r.s:2153   .debug_str:0000000000000450 .LASF61
     /tmp/ccGOUQ9r.s:2121   .debug_str:000000000000037f .LASF62
     /tmp/ccGOUQ9r.s:2125   .debug_str:000000000000039c .LASF63
     /tmp/ccGOUQ9r.s:2199   .debug_str:00000000000005ff .LASF64
     /tmp/ccGOUQ9r.s:2051   .debug_str:00000000000000fd .LASF65
     /tmp/ccGOUQ9r.s:2227   .debug_str:000000000000070e .LASF66
     /tmp/ccGOUQ9r.s:2281   .debug_str:0000000000000983 .LASF67
     /tmp/ccGOUQ9r.s:2245   .debug_str:00000000000007c5 .LASF68
     /tmp/ccGOUQ9r.s:2217   .debug_str:000000000000069a .LASF69
     /tmp/ccGOUQ9r.s:2247   .debug_str:00000000000007db .LASF70
     /tmp/ccGOUQ9r.s:2225   .debug_str:00000000000006eb .LASF71
     /tmp/ccGOUQ9r.s:2205   .debug_str:000000000000062d .LASF72
     /tmp/ccGOUQ9r.s:2047   .debug_str:000000000000007d .LASF73
     /tmp/ccGOUQ9r.s:2263   .debug_str:0000000000000849 .LASF74
     /tmp/ccGOUQ9r.s:2243   .debug_str:00000000000007a1 .LASF75
     /tmp/ccGOUQ9r.s:2313   .debug_str:0000000000000a7d .LASF77
     /tmp/ccGOUQ9r.s:2195   .debug_str:00000000000005e5 .LASF79
     /tmp/ccGOUQ9r.s:2137   .debug_str:0000000000000400 .LASF80
     /tmp/ccGOUQ9r.s:2165   .debug_str:00000000000004c9 .LASF81
     /tmp/ccGOUQ9r.s:2315   .debug_str:0000000000000a82 .LASF82
     /tmp/ccGOUQ9r.s:2135   .debug_str:00000000000003ef .LASF83
     /tmp/ccGOUQ9r.s:2139   .debug_str:0000000000000405 .LASF84
     /tmp/ccGOUQ9r.s:2057   .debug_str:0000000000000163 .LASF85
     /tmp/ccGOUQ9r.s:2317   .debug_str:0000000000000a87 .LASF86
     /tmp/ccGOUQ9r.s:2079   .debug_str:0000000000000212 .LASF87
     /tmp/ccGOUQ9r.s:2141   .debug_str:000000000000040a .LASF88
     /tmp/ccGOUQ9r.s:2147   .debug_str:0000000000000419 .LASF89
     /tmp/ccGOUQ9r.s:2319   .debug_str:0000000000000a8c .LASF90
     /tmp/ccGOUQ9r.s:2337   .debug_str:0000000000000b18 .LASF91
     /tmp/ccGOUQ9r.s:2143   .debug_str:000000000000040f .LASF92
GAS LISTING /tmp/ccGOUQ9r.s 			page 12


     /tmp/ccGOUQ9r.s:2083   .debug_str:000000000000022e .LASF93
     /tmp/ccGOUQ9r.s:2321   .debug_str:0000000000000a91 .LASF94
     /tmp/ccGOUQ9r.s:2287   .debug_str:00000000000009d5 .LASF95
     /tmp/ccGOUQ9r.s:2145   .debug_str:0000000000000414 .LASF96
     /tmp/ccGOUQ9r.s:2033   .debug_str:0000000000000000 .LASF97
     /tmp/ccGOUQ9r.s:2339   .debug_str:0000000000000b29 .LASF98
     /tmp/ccGOUQ9r.s:2329   .debug_str:0000000000000abb .LASF99
     /tmp/ccGOUQ9r.s:2213   .debug_str:0000000000000682 .LASF100
     /tmp/ccGOUQ9r.s:2219   .debug_str:00000000000006bf .LASF101
     /tmp/ccGOUQ9r.s:2183   .debug_str:0000000000000578 .LASF102
     /tmp/ccGOUQ9r.s:2151   .debug_str:000000000000043d .LASF103
     /tmp/ccGOUQ9r.s:2311   .debug_str:0000000000000a73 .LASF104
     /tmp/ccGOUQ9r.s:2327   .debug_str:0000000000000aa5 .LASF105
     /tmp/ccGOUQ9r.s:2065   .debug_str:00000000000001a1 .LASF106
     /tmp/ccGOUQ9r.s:2173   .debug_str:0000000000000510 .LASF107
     /tmp/ccGOUQ9r.s:2323   .debug_str:0000000000000a96 .LASF108
     /tmp/ccGOUQ9r.s:2283   .debug_str:00000000000009ab .LASF109
     /tmp/ccGOUQ9r.s:2181   .debug_str:0000000000000570 .LASF110
     /tmp/ccGOUQ9r.s:2099   .debug_str:00000000000002bd .LASF111
     /tmp/ccGOUQ9r.s:2297   .debug_str:0000000000000a1d .LASF112
     /tmp/ccGOUQ9r.s:2291   .debug_str:00000000000009ee .LASF113
     /tmp/ccGOUQ9r.s:2085   .debug_str:000000000000023f .LASF114
     /tmp/ccGOUQ9r.s:2123   .debug_str:000000000000038a .LASF115
     /tmp/ccGOUQ9r.s:2131   .debug_str:00000000000003d7 .LASF116
     /tmp/ccGOUQ9r.s:2117   .debug_str:000000000000034d .LASF117
     /tmp/ccGOUQ9r.s:2257   .debug_str:0000000000000829 .LASF118
     /tmp/ccGOUQ9r.s:2239   .debug_str:000000000000076d .LASF119
     /tmp/ccGOUQ9r.s:2325   .debug_str:0000000000000a9e .LASF120
     /tmp/ccGOUQ9r.s:2067   .debug_str:00000000000001ab .LASF121
     /tmp/ccGOUQ9r.s:2039   .debug_str:000000000000001d .LASF122
     /tmp/ccGOUQ9r.s:2233   .debug_str:000000000000073e .LASF123
     /tmp/ccGOUQ9r.s:2295   .debug_str:0000000000000a12 .LASF124
     /tmp/ccGOUQ9r.s:2335   .debug_str:0000000000000b00 .LASF125
     /tmp/ccGOUQ9r.s:2293   .debug_str:0000000000000a03 .LASF126
     /tmp/ccGOUQ9r.s:2045   .debug_str:0000000000000061 .LASF127
     /tmp/ccGOUQ9r.s:2285   .debug_str:00000000000009bf .LASF151
     /tmp/ccGOUQ9r.s:2211   .debug_str:000000000000065f .LASF152
     /tmp/ccGOUQ9r.s:2103   .debug_str:00000000000002d6 .LASF128
     /tmp/ccGOUQ9r.s:48     .text:0000000000000028 .LFB50
     /tmp/ccGOUQ9r.s:157    .text:00000000000000d4 .LFE50
     /tmp/ccGOUQ9r.s:2081   .debug_str:0000000000000223 .LASF129
     /tmp/ccGOUQ9r.s:2187   .debug_str:00000000000005af .LASF130
     /tmp/ccGOUQ9r.s:63     .text:0000000000000040 .LBB8
     /tmp/ccGOUQ9r.s:75     .text:0000000000000044 .LBE8
     /tmp/ccGOUQ9r.s:77     .text:0000000000000044 .LBB10
     /tmp/ccGOUQ9r.s:89     .text:000000000000004c .LBE10
     /tmp/ccGOUQ9r.s:1989   .debug_loc:0000000000000000 .LLST1
     /tmp/ccGOUQ9r.s:123    .text:000000000000009c .LBB12
     /tmp/ccGOUQ9r.s:131    .text:00000000000000a0 .LBE12
     /tmp/ccGOUQ9r.s:1997   .debug_loc:0000000000000024 .LLST2
     /tmp/ccGOUQ9r.s:98     .text:0000000000000064 .LVL5
     /tmp/ccGOUQ9r.s:108    .text:0000000000000080 .LVL6
     /tmp/ccGOUQ9r.s:116    .text:0000000000000098 .LVL7
     /tmp/ccGOUQ9r.s:137    .text:00000000000000ac .LVL10
     /tmp/ccGOUQ9r.s:144    .text:00000000000000c0 .LVL11
     /tmp/ccGOUQ9r.s:2171   .debug_str:0000000000000500 .LASF131
     /tmp/ccGOUQ9r.s:2163   .debug_str:00000000000004b3 .LASF132
GAS LISTING /tmp/ccGOUQ9r.s 			page 13


     /tmp/ccGOUQ9r.s:10     .text:0000000000000000 .LFB49
     /tmp/ccGOUQ9r.s:37     .text:0000000000000028 .LFE49
     /tmp/ccGOUQ9r.s:2004   .debug_loc:0000000000000047 .LLST0
     /tmp/ccGOUQ9r.s:26     .text:0000000000000018 .LVL1
     /tmp/ccGOUQ9r.s:2101   .debug_str:00000000000002d1 .LASF153
     /tmp/ccGOUQ9r.s:2105   .debug_str:00000000000002db .LASF133
     /tmp/ccGOUQ9r.s:2305   .debug_str:0000000000000a4b .LASF134
     /tmp/ccGOUQ9r.s:2091   .debug_str:000000000000026a .LASF135
     /tmp/ccGOUQ9r.s:2303   .debug_str:0000000000000a3d .LASF137
     /tmp/ccGOUQ9r.s:2043   .debug_str:000000000000004c .LASF136
     /tmp/ccGOUQ9r.s:2223   .debug_str:00000000000006db .LASF138
     /tmp/ccGOUQ9r.s:2087   .debug_str:0000000000000245 .LASF139
     /tmp/ccGOUQ9r.s:2197   .debug_str:00000000000005f6 .LASF140
     /tmp/ccGOUQ9r.s:2175   .debug_str:0000000000000526 .LASF141
     /tmp/ccGOUQ9r.s:2209   .debug_str:0000000000000656 .LASF142
     /tmp/ccGOUQ9r.s:72     .text:0000000000000044 .LVL3
     /tmp/ccGOUQ9r.s:86     .text:000000000000004c .LVL4
     /tmp/ccGOUQ9r.s:122    .text:000000000000009c .LVL8
     /tmp/ccGOUQ9r.s:129    .text:00000000000000a0 .LVL9
     /tmp/ccGOUQ9r.s:14     .text:0000000000000000 .LVL0
     /tmp/ccGOUQ9r.s:164    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
_Z8userMainv
_ZN5Riscv14supervisorTrapEv
_ZN12kernelThread12createThreadEPPS_PFvPvES2_Pm
_ZN12kernelThread7runningE
_ZN5Riscv21ecallWithoutArgumentsEm
_Z13thread_createPP12kernelThreadPFvPvES2_
_Z15thread_dispatchv
_Z8printStrPKc
